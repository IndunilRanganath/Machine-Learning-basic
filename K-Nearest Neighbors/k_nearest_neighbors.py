# -*- coding: utf-8 -*-
"""K-Nearest Neighbors.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jfZeYPtFFIItHtdBOa3zO0Ecqz1rl4qw
"""

import numpy as np
import pandas as pd

data = pd.read_csv("/content/Iris.csv")
data.head()

data.shape

data['Species'].value_counts()

data.info()

data.describe()

data.head()

x = data.iloc[:, 1:5]
x.head()

y = data.iloc[:, -1]
y.head()

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()

x = scaler.fit_transform(x)
x[0:5]

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2)

x_train.shape

#model train using k = 1
from sklearn.neighbors import KNeighborsClassifier
model = KNeighborsClassifier(n_neighbors=1)
model .fit(x_train, y_train)

pred = model.predict(x_test)
pred[0:5]

y_test[0:5]

from sklearn.metrics import accuracy_score
accuracy = accuracy_score(y_test, pred)
accuracy

from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, pred)
cm

result = pd.DataFrame(data=[y_test.values, pred], index = ['y_test', 'pres'])
result.transpose()

# find best K value for model
correct_sum = []
for i in range(1, 20):
  model = KNeighborsClassifier(n_neighbors=i)
  model.fit(x_train,y_train)
  pred = model.predict(x_test)
  correct = np.sum(pred == y_test)
  correct_sum.append(correct)

correct_sum

result =  pd.DataFrame(data = correct_sum)
result.index = result.index + 1
result.T

from sklearn.neighbors import KNeighborsClassifier
model = KNeighborsClassifier(n_neighbors=8)
model .fit(x_train, y_train)

accuracy_score(y_test, pred)

